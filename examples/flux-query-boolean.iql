from(bucket: "vtrFeederData")
  |> range(start: -10h)
  |> filter(fn: (r) =>
    r._measurement == "status_data" and
    contains(value: r._field, set: [
      "FeederStatusBits.BulkHopperEnabled",
      "FeederStatusBits.BulkHopperLevelNotOK",
      "FeederStatusBits.CrossConveyorEnabled",
      "FeederStatusBits.CrossConveyorLevelNotOK",
      "FeederStatusBits.ElevatorEnabled",
      "FeederStatusBits.ElevatorLevelNotOK",
      "FeederStatusBits.EscapementAdvEnabled",
      "FeederStatusBits.EscapementRetEnabled",
      "FeederStatusBits.OrientationEnabled",
      "FeederStatusBits.OrientationLevelNotOK",
      "FeederStatusBits.TransferEnabled",
      "FeederStatusBits.TransferLevelNotOK",
      "JamStatusBits.JamInOrientation.Lane1",
      "JamStatusBits.JamInOrientation.Lane2",
      "JamStatusBits.JamInOrientation.Lane3",
      "JamStatusBits.JamInOrientation.Lane4",
      "JamStatusBits.JamInOrientation.Lane5",
      "JamStatusBits.JamInOrientation.Lane6",
      "JamStatusBits.JamInOrientation.Lane7",
      "JamStatusBits.JamInOrientation.Lane8",
      "LevelStatusBits.HighLevelLane.Lane1",
      "LevelStatusBits.HighLevelLane.Lane2",
      "LevelStatusBits.HighLevelLane.Lane3",
      "LevelStatusBits.HighLevelLane.Lane4",
      "LevelStatusBits.HighLevelLane.Lane5",
      "LevelStatusBits.HighLevelLane.Lane6",
      "LevelStatusBits.HighLevelLane.Lane7",
      "LevelStatusBits.HighLevelLane.Lane8",
      "LevelStatusBits.NotLowLevelLane.Lane1",
      "LevelStatusBits.NotLowLevelLane.Lane2",
      "LevelStatusBits.NotLowLevelLane.Lane3",
      "LevelStatusBits.NotLowLevelLane.Lane4",
      "LevelStatusBits.NotLowLevelLane.Lane5",
      "LevelStatusBits.NotLowLevelLane.Lane6",
      "LevelStatusBits.NotLowLevelLane.Lane7",
      "LevelStatusBits.NotLowLevelLane.Lane8",
      "SystemStatusBits.AirPressureOK",
      "SystemStatusBits.AutoMode",
      "SystemStatusBits.ControlPowerON",
      "SystemStatusBits.PurgeMode",
      "SystemStatusBits.SystemFaulted",
      "SystemStatusBits.SystemIdle"
    ])
  )
  |> aggregateWindow(every: 1m, fn: last)
  |> fill(usePrevious: true)
  |> map(fn: (r) => ({
      _field: r._field,
      _value: if r._value == true then 60 else 0
  }))
  |> group(columns: ["_field"])
  |> reduce(
      identity: {field: "", totalSeconds: 0, count: 0},
      fn: (r, accumulator) => ({
          field: r._field,
          totalSeconds: accumulator.totalSeconds + int(v: r._value),
          count: accumulator.count + 60
      })
  )
  |> map(fn: (r) => ({
      _field: r.field,
      percentageTrue: (float(v: r.totalSeconds) / float(v: r.count)) * 100.0,
      timeInAuto_minutes: float(v: r.totalSeconds) / 60.0,
      timeInAuto_seconds: float(v: r.totalSeconds)
  }))
