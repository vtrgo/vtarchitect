from(bucket: "vtrFeederData")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) =>
      r._measurement == "status_data" and
      contains(value: r._field, set: [
        "VibrationDataFloats[0].VibrationX",
        "VibrationDataFloats[0].VibrationY",
        "VibrationDataFloats[0].VibrationZ",
        "VibrationDataFloats[0].Temperature",
        "VibrationDataFloats[1].VibrationX",
        "VibrationDataFloats[1].VibrationY",
        "VibrationDataFloats[1].VibrationZ",
        "VibrationDataFloats[1].Temperature",
        "VibrationDataFloats[2].VibrationX",
        "VibrationDataFloats[2].VibrationY",
        "VibrationDataFloats[2].VibrationZ",
        "VibrationDataFloats[2].Temperature",
        "VibrationDataFloats[3].VibrationX",
        "VibrationDataFloats[3].VibrationY",
        "VibrationDataFloats[3].VibrationZ",
        "VibrationDataFloats[3].Temperature",
        "VibrationDataFloats[4].VibrationX",
        "VibrationDataFloats[4].VibrationY",
        "VibrationDataFloats[4].VibrationZ",
        "VibrationDataFloats[4].Temperature"
      ])
  )
  |> group(columns: ["_field"])
  |> mean(column: "_value")
  |> map(fn: (r) => ({ _time: v.timeRangeStop, _measurement: r._field, _value: r._value }))
  |> yield(name: "mean_over_range")
